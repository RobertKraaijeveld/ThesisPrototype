using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using ThesisPrototype.DatabaseApis;
using ThesisPrototype.DataModels;
using ThesisPrototype.Enums;
using ThesisPrototype.Retrievers;

namespace ThesisPrototype.Handlers
{
    public class RedisImportHandler : AbstractImportHandler
    {
        private readonly KpiCalculationHandler _kpiCalculationHandler;

        public RedisImportHandler(KpiCalculationHandler kpiCalculationHandler)
        {
            _kpiCalculationHandler = kpiCalculationHandler;
        }


        /// <summary>
        /// Takes a FileStream, representing a .CSV file which was generated by the ImportFileCreator.
        /// It then creates a DataImportMeta object and a list of RedisSensorValuesRow objects, 
        /// saves the RedisSensorValuesRow to the redis KV-store, and calls the KpiCalculationHandler.Handle subroutine.
        /// </summary>
        public override void Handle(FileStream importFile)
        {
            Tuple<DataImportMeta, List<RedisSensorValuesRow>> importMetaAndRows = this.SaveImport(importFile);
            DataImportMeta importMeta = importMetaAndRows.Item1;
            List<RedisSensorValuesRow> importRows = importMetaAndRows.Item2;

            _kpiCalculationHandler.Handle(importRows, importMeta.ShipId, importMeta.ImportDate);
        }

        private Tuple<DataImportMeta, List<RedisSensorValuesRow>> SaveImport(FileStream importFile)
        {
            string importFileName = importFile.Name.Split('\\').Last();
            long shipIdOfImport = GetShipIdFromFileName(importFileName);
            DateTime dateTimeOfImport = GetImportDateFromFileName(importFileName);

            if (importFile.Length > 0)
            {
                var rows = new List<RedisSensorValuesRow>();

                using (var stream = new StreamReader(importFile))
                {
                    string header = null;
                    string currentLine;

                    while (stream.Peek() >= 0)
                    {
                        currentLine = stream.ReadLine();

                        if (header == null)
                        {
                            header = currentLine;
                            continue; // Skipping header
                        }

                        // Throwing exception when > SENSORVALUES_AMOUNT_PER_IMPORT are found
                        if(rows.Count < SENSORVALUES_AMOUNT_PER_IMPORT)
                        {
                            Dictionary<ESensor, string> rowAsDict = this.RowToDictionary(header, currentLine);
                            rows.Add(new RedisSensorValuesRow(shipIdOfImport, dateTimeOfImport, rowAsDict));
                        }
                        else
                        {
                            throw new Exception($"Import cannot have more than {SENSORVALUES_AMOUNT_PER_IMPORT} rows!");
                        }
                    }
                }

                SaveSensorValues(rows);

                var dataImportMeta = new DataImportMeta(shipIdOfImport, dateTimeOfImport);
                SaveDataImportMeta(dataImportMeta);

                return new Tuple<DataImportMeta, List<RedisSensorValuesRow>>(dataImportMeta, rows);
            }
            else
            {
                throw new Exception("Empty import file.");
            }
        }

        private void SaveSensorValues(List<RedisSensorValuesRow> rows)
        {
            RedisDatabaseApi.Create<RedisSensorValuesRow>(rows);
        }
    }
}